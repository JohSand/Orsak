//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace Orsak.Myriad.Showcase
open Orsak
module Face =
    let countBeans a b =
        Effect.Create(fun (er: #IProvide<IFace>) -> er.Effect.CountBeans(a, b))
    let pushButton ()=
        Effect.Create(fun (er: #IProvide<IFace>) -> er.Effect.PushButton ())

namespace Orsak.Myriad.Showcase
open Orsak
open Orsak.Myriad
open System.Threading.Tasks
type Runner2W0 = {
    Face: IFace
    RandomGenerator: IRandomGenerator
} with
    interface IProvide<IFace> with
        member this.Effect = this.Face
    interface IProvide<IRandomGenerator> with
        member this.Effect = this.RandomGenerator
namespace Orsak.Myriad.Showcase.Orsak.Myriad.Gen
open Orsak
open Orsak.Myriad
open System.Threading.Tasks
open Orsak.Myriad.Gen
open System.Runtime.InteropServices
open Orsak.Myriad.Showcase
type FaceExtractor =
    static member Extract(_: FaceExtractor, e: EffectContext<IFace, 'b>) = e.A
    static member Extract(_: FaceExtractor, e: EffectContext<'a, IFace>) = e.B
type RandomGeneratorExtractor =
    static member Extract(_: RandomGeneratorExtractor, e: EffectContext<IRandomGenerator, 'b>) = e.A
    static member Extract(_: RandomGeneratorExtractor, e: EffectContext<'a, IRandomGenerator>) = e.B
[<AutoOpen>]
module Extractors =
    let inline (|ExtractFace|) a : IFace =
        Writer.extract Unchecked.defaultof<FaceExtractor> a
    let inline (|ExtractRandomGenerator|) a : IRandomGenerator =
        Writer.extract Unchecked.defaultof<RandomGeneratorExtractor> a
type EffectRunnerBuilder() =
    member _.Yield(_: unit) = EffectContext()
    member inline _.Run(a: EffectContext<'a>) = Runner.createFrom a.A
    [<CustomOperation("fromEffect")>]
    member inline _.FromEffect(x: GenContext<_, _, _>, p: IFace) = x.Create(p)
    [<CustomOperation("fromEffect")>]
    member inline _.FromEffect(x: GenContext<_, _, _>, p: IRandomGenerator) = x.Create(p)
    member inline _.Run(a) =
        match a with
        | ExtractFace(a) & ExtractRandomGenerator(b) -> {
            Face = a
            RandomGenerator = b
        }
namespace Orsak.Myriad.Showcase
open Orsak.Myriad.Showcase.Orsak.Myriad.Gen
module Runner =
    let mkRunner = EffectRunnerBuilder()

