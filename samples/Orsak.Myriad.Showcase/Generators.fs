//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace ConsoleApp1
open Orsak
open Orsak.Myriad
open System.Threading
open Microsoft.Extensions.Caching.Memory
type Runner3W0 = {
    CancellationTokenSource: CancellationTokenSource
    MemoryCache: IMemoryCache
    RandomGenerator: IRandomGenerator
} with
    interface IProvide<CancellationTokenSource> with
        member this.Effect = this.CancellationTokenSource
    interface IProvide<IMemoryCache> with
        member this.Effect = this.MemoryCache
    interface IProvide<IRandomGenerator> with
        member this.Effect = this.RandomGenerator
type Runner2W0 = {
    RandomGenerator: IRandomGenerator
    CancellationTokenSource: CancellationTokenSource
} with
    interface IProvide<IRandomGenerator> with
        member this.Effect = this.RandomGenerator
    interface IProvide<CancellationTokenSource> with
        member this.Effect = this.CancellationTokenSource
type Runner2W1 = {
    RandomGenerator: IRandomGenerator
    MemoryCache: IMemoryCache
} with
    interface IProvide<IRandomGenerator> with
        member this.Effect = this.RandomGenerator
    interface IProvide<IMemoryCache> with
        member this.Effect = this.MemoryCache
type Runner2W2 = {
    CancellationTokenSource: CancellationTokenSource
    MemoryCache: IMemoryCache
} with
    interface IProvide<CancellationTokenSource> with
        member this.Effect = this.CancellationTokenSource
    interface IProvide<IMemoryCache> with
        member this.Effect = this.MemoryCache
namespace ConsoleApp1.Orsak.Myriad.Gen
open Orsak
open Orsak.Myriad
open System.Threading
open Microsoft.Extensions.Caching.Memory
open Orsak.Myriad.Gen
open System.Runtime.InteropServices
open ConsoleApp1
type CancellationTokenSourceExtractor =
    static member Extract(_: CancellationTokenSourceExtractor, e: EffectContext<CancellationTokenSource, 'b>) = e.A
    static member Extract(_: CancellationTokenSourceExtractor, e: EffectContext<'a, CancellationTokenSource>) = e.B
    static member Extract(_: CancellationTokenSourceExtractor, e: EffectContext<CancellationTokenSource, 'b, 'c>) = e.A
    static member Extract(_: CancellationTokenSourceExtractor, e: EffectContext<'a, CancellationTokenSource, 'c>) = e.B
    static member Extract(_: CancellationTokenSourceExtractor, e: EffectContext<'a, 'b, CancellationTokenSource>) = e.C
type MemoryCacheExtractor =
    static member Extract(_: MemoryCacheExtractor, e: EffectContext<IMemoryCache, 'b>) = e.A
    static member Extract(_: MemoryCacheExtractor, e: EffectContext<'a, IMemoryCache>) = e.B
    static member Extract(_: MemoryCacheExtractor, e: EffectContext<IMemoryCache, 'b, 'c>) = e.A
    static member Extract(_: MemoryCacheExtractor, e: EffectContext<'a, IMemoryCache, 'c>) = e.B
    static member Extract(_: MemoryCacheExtractor, e: EffectContext<'a, 'b, IMemoryCache>) = e.C
type RandomGeneratorExtractor =
    static member Extract(_: RandomGeneratorExtractor, e: EffectContext<IRandomGenerator, 'b>) = e.A
    static member Extract(_: RandomGeneratorExtractor, e: EffectContext<'a, IRandomGenerator>) = e.B
    static member Extract(_: RandomGeneratorExtractor, e: EffectContext<IRandomGenerator, 'b, 'c>) = e.A
    static member Extract(_: RandomGeneratorExtractor, e: EffectContext<'a, IRandomGenerator, 'c>) = e.B
    static member Extract(_: RandomGeneratorExtractor, e: EffectContext<'a, 'b, IRandomGenerator>) = e.C
[<AutoOpen>]
module Extractors =
    let inline (|ExtractCancellationTokenSource|) a : CancellationTokenSource =
        Writer.extract Unchecked.defaultof<CancellationTokenSourceExtractor> a
    let inline (|ExtractMemoryCache|) a : IMemoryCache =
        Writer.extract Unchecked.defaultof<MemoryCacheExtractor> a
    let inline (|ExtractRandomGenerator|) a : IRandomGenerator =
        Writer.extract Unchecked.defaultof<RandomGeneratorExtractor> a
type EffectRunnerBuilder() =
    member _.Yield(_: unit) = EffectContext()
    member inline _.Run(a: EffectContext<'a>) = Runner.createFrom a.A
    [<CustomOperation("fromEffect")>]
    member inline _.FromEffect(x: GenContext<_, _, _>, p: CancellationTokenSource) = x.Create(p)
    [<CustomOperation("fromEffect")>]
    member inline _.FromEffect(x: GenContext<_, _, _>, p: IMemoryCache) = x.Create(p)
    [<CustomOperation("fromEffect")>]
    member inline _.FromEffect(x: GenContext<_, _, _>, p: IRandomGenerator) = x.Create(p)
    member inline _.Run(a) =
        match a with
        | ExtractCancellationTokenSource(a) & ExtractMemoryCache(b) & ExtractRandomGenerator(c) -> {
            CancellationTokenSource = a
            MemoryCache = b
            RandomGenerator = c
        }
    member inline _.Run(a, [<Optional>]_a: byte) =
        match a with
        | ExtractRandomGenerator(a) & ExtractCancellationTokenSource(b) -> {
            RandomGenerator = a
            CancellationTokenSource = b
        }
    member inline _.Run(a, [<Optional>]_a: sbyte) =
        match a with
        | ExtractRandomGenerator(a) & ExtractMemoryCache(b) -> {
            RandomGenerator = a
            MemoryCache = b
        }
    member inline _.Run(a, [<Optional>]_a: int16) =
        match a with
        | ExtractCancellationTokenSource(a) & ExtractMemoryCache(b) -> {
            CancellationTokenSource = a
            MemoryCache = b
        }
namespace ConsoleApp1
open ConsoleApp1.Orsak.Myriad.Gen
module Runner =
    let mkRunner = EffectRunnerBuilder()

